sudo: false
# Note: cannot use "rust" here, because that doesn't give us the "rustup"
# binary, which we need for cross-compilation.
# As a workaround, we use "generic" and install the rust ecosystem ourselves.
language: generic

# Env variables:
#
#   TARGET:      target triplet
#   CHANNEL:     rust channel: stable/beta/nightly. If not specified, defaults
#                to stable.
#   FEATURES:    build with --features "$FEATURES". Will also build (but not
#                run) without those features.
#   ONLY_DEPLOY: build this configuration only if we are deploying a release
#                (pushing a tag).

env:
  global:
    - secure: GXW0WyMkipF5lh29QHMxSKl6Dpvd4Qqggu5SBGymS5KQ7VPuqgEE2A8YwQDIGf4IEZUoAcAb1W7oPwQ0/kv7omlF2S8gmals1BeGKStU1np6lIIH64B87w4RIDhD+limVAfKgWb3Oldj6PDAm8gjbWjPiZF/6oxH4hd/+d9r2GY=
    - PROJECT_NAME=safe_vault
    - LibSodiumVersion=1.0.9

matrix:
  include:
    - os: linux
      env: TARGET=x86_64-unknown-linux-gnu FEATURES=use-mock-crust

    # TODO: Figure out cross-compilation and uncomment these:
    # - os: linux
    #   env: TARGET=i686-unknown-linux-gnu FEATURES=use-mock-crust ONLY_DEPLOY=1

    # - os: linux
    #   env: TARGET=x86_64-unknown-linux-musl FEATURES=use-mock-crust ONLY_DEPLOY=1

    # - os: linux
    #   env: TARGET=armv7-unknown-linux-gnueabihf FEATURES=use-mock-crust ONLY_DEPLOY=1
    #   # Extra packages only for this job
    #   addons:
    #     apt:
    #       packages:
    #         # Cross compiler and cross compiled C libraries
    #         - gcc-arm-linux-gnueabihf
    #         - libc6-armhf-cross
    #         - libc6-dev-armhf-cross
    #         # Transparent emulation
    #         - qemu-user-static
    #         - binfmt-support

    - os: linux
      env: CHANNEL=nightly FEATURES="clippy use-mock-crust"
      allow_failures: true

    - os: osx
      env: TARGET=x86_64-apple-darwin FEATURES=use-mock-crust

    - os: osx
      env: CHANNEL=nightly FEATURES="clippy use-mock-crust"
      allow_failures: true

  # Add "allow_failures: true" to rows which are allowed to fail without making
  # the whole build fail. This is useful for nightly builds.
  allow_failures:
    - allow_failures: true
  # Don't wait for the rows that are allowed to fail.
  fast_finish: true

branches:
  only:
    # Pushes and PRs to the master branch
    - master
    # Pushes to tags (will trigger deploy)
    # This regex matches semantic versions like v1.2.3-rc4+2016.02.22
    - /^v\d+\.\d+\.\d+.*$/

cache:
  directories:
    - $HOME/libsodium
    - $HOME/.cargo

before_install:
  - export PATH="$PATH:$HOME/.cargo/bin"
  - export PKG_CONFIG_PATH="$HOME/libsodium/$LibSodiumVersion/lib/pkgconfig:$PKG_CONFIG_PATH"
  - export PKG_CONFIG_ALLOW_CROSS=1

install:
  - ./ci/travis/install.sh

script:
  - ./ci/travis/script.sh

after_success:
  - curl -sSL https://github.com/maidsafe/QA/raw/master/Bash%20Scripts/Travis/after_success.sh | bash

before_deploy:
  - ./ci/travis/before_deploy.sh

# Deploy happens only when pushing a tag and only for stable rust.
deploy:
  provider: releases

  # TODO Regenerate this api_key for your project, this one won't work for you. Here's how:
  # - Go to 'https://github.com/settings/tokens/new' and generate a Token with only the
  # `public_repo` scope enabled
  # - Call `travis encrypt $github_token` where $github_token is the token you got in the previous
  # step and `travis` is the official Travis CI gem (see https://rubygems.org/gems/travis/)
  # - Enter the "encrypted value" below
  api_key:
    secure: "jYtMFjw2vGqiakmUOH9H/4lN+iPDwtG2IoCTsGF8Jn5c74pebASN5so6nDkGhyZuo52hM1Q60xvhJU0eblA+7ryv2JV1kEnINFuJ31bnWf81oSEGmN3aEla2OWZe/nS8taVbIYEYA2DqNQeo6UX/sMUTCrWbh1VGnqNiWQv6j/wuAEKRlNVFqhnA42zsbTtX+Jzr+hdnrs33GbnRl8geDjDuqGb7Pk6FdDPysALuQmwRsrj3/IG6k/1AMDtFf8RSD0hFezoNvwq2k9b1iji5hJJDOAjHL74XDRGWg4dZovw1ImFSSeuHg86uRyxFj3b3OgP4MS32UxLQJ+yZvlKLOJ09AWBYmEpNdFL+GX4UIr99NMhT/5CPJNtWed8Lttr3p3RZCFVMNMWHFkI7aNbGZr0OVdDvX0zsRvKt+SPBB0N7EGlGaUKNiL6DuPMRLr0xSN224dsY8TTlfWWPYc3NYNaeRAFLGx7OZIlcB1S95zElgJD16DPTiGg9gs/8R10zKWcqklprvFF5f9yg53Fbuq6xrwhPWoRKFCVQjgBvKedTWtnYxu1RrtF7IuesGFWVK8I/6OJw5IIdvSy2ieDdXehZQoyw1LQQ4smwAZQjCdwfaCBZarSeqi2yYMRx+QZicUHEQM8G+GafhMEYDC8zRRTxvqTGgu79chFxczhcpJI="

  file: ${PROJECT_NAME}-${TRAVIS_TAG}-${TARGET}.tar.gz
  skip_cleanup: true
  draft: true
  on:
      tags: true
      condition: (-n "$TARGET") && ("${CHANNEL:-stable}"=stable)
