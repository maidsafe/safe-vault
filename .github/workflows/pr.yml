# PR workflow.
#
# Runs full suite of checks, with warnings treated as errors.

name: PR

on: pull_request

env:
  # Run all cargo commands with --verbose.
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1
  # Deny all compiler warnings.
  RUSTFLAGS: "-D warnings"

jobs:
  clippy:
    name: Rustfmt-Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        name: Install Rust & required components
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      # Check if the code is formatted correctly.
      - name: Check formatting
        run: cargo fmt --all -- --check

      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Run Clippy.
      - name: Clippy checks
        shell: bash
        run: ./scripts/clippy

  tarpaulin:
      name: Tarpaulin
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v1
        - uses: actions-rs/toolchain@v1
          name: Install Rust & required components
          with:
            profile: minimal
            toolchain: stable

        # Cache.
        - name: Cache cargo registry
          uses: actions/cache@v1
          with:
            path: ~/.cargo/registry
            key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        - name: Cache cargo index
          uses: actions/cache@v1
          with:
            path: ~/.cargo/git
            key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        - name: Cache cargo build
          uses: actions/cache@v1
          with:
            path: target
            key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

        # Run cargo tarpaulin & push result to coveralls.io
        - name: rust-tarpaulin
          uses: actions-rs/tarpaulin@v0.1.0
          with:
            args: '-v --release --out Lcov'
        - name: Coveralls GitHub Action
          uses: coverallsapp/github-action@master
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            parallel: true
            path-to-lcov: ./lcov.info

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v1
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache.
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Run tests.
      - name: Run tests
        shell: bash
        run: ./scripts/tests

  coverage:
    needs: [test, tarpaulin]
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
